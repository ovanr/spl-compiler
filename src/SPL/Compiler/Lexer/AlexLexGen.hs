{-# OPTIONS_GHC -fno-warn-unused-binds -fno-warn-missing-signatures #-}
{-# LANGUAGE CPP #-}
{-# LINE 1 "AlexLexGen.x" #-}

{-# LANGUAGE OverloadedStrings #-}

module SPL.Compiler.Lexer.AlexLexGen 
    (
    tokenize, 
    Token(..), 
    Symbol(..), 
    Type(..),
    Keyword(..), 
    Separator(..),
    Operator(..)
    ) where

import Control.Applicative
import System.Environment
import qualified Data.ByteString.Lazy as B
import qualified Data.Text as T
import qualified Data.Text.IO as TIO
import qualified Data.Text.Encoding as TE

#if __GLASGOW_HASKELL__ >= 603
#include "ghcconfig.h"
#elif defined(__GLASGOW_HASKELL__)
#include "config.h"
#endif
#if __GLASGOW_HASKELL__ >= 503
import Data.Array
#else
import Array
#endif
{-# LINE 1 "templates/wrappers.hs" #-}
-- -----------------------------------------------------------------------------
-- Alex wrapper code.
--
-- This code is in the PUBLIC DOMAIN; you may copy it freely and use
-- it for any purpose whatsoever.


import Control.Applicative as App (Applicative (..))


import Data.Word (Word8)


import Data.Int (Int64)
import qualified Data.Char
import qualified Data.ByteString.Lazy     as ByteString
import qualified Data.ByteString.Internal as ByteString (w2c)










































type Byte = Word8

-- -----------------------------------------------------------------------------
-- The input type






















type AlexInput = (AlexPosn,     -- current position,
                  Char,         -- previous char
                  ByteString.ByteString,        -- current input string
                  Int64)           -- bytes consumed so far

ignorePendingBytes :: AlexInput -> AlexInput
ignorePendingBytes i = i   -- no pending bytes when lexing bytestrings

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (_,c,_,_) = c

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p,_,cs,n) =
    case ByteString.uncons cs of
        Nothing -> Nothing
        Just (b, cs') ->
            let c   = ByteString.w2c b
                p'  = alexMove p c
                n'  = n+1
            in p' `seq` cs' `seq` n' `seq` Just (b, (p', c, cs',n'))






































-- -----------------------------------------------------------------------------
-- Token positions

-- `Posn' records the location of a token in the input text.  It has three
-- fields: the address (number of chacaters preceding the token), line number
-- and column of a token within the file. `start_pos' gives the position of the
-- start of the file and `eof_pos' a standard encoding for the end of file.
-- `move_pos' calculates the new position after traversing a given character,
-- assuming the usual eight character tab stops.


data AlexPosn = AlexPn !Int !Int !Int
        deriving (Eq,Show)

alexStartPos :: AlexPosn
alexStartPos = AlexPn 0 1 1

alexMove :: AlexPosn -> Char -> AlexPosn
alexMove (AlexPn a l c) '\t' = AlexPn (a+1)  l     (c+alex_tab_size-((c-1) `mod` alex_tab_size))
alexMove (AlexPn a l _) '\n' = AlexPn (a+1) (l+1)   1
alexMove (AlexPn a l c) _    = AlexPn (a+1)  l     (c+1)


-- -----------------------------------------------------------------------------
-- Monad (default and with ByteString input)


data AlexState = AlexState {
        alex_pos :: !AlexPosn,  -- position at current input location





        alex_bpos:: !Int64,     -- bytes consumed so far
        alex_inp :: ByteString.ByteString,      -- the current input
        alex_chr :: !Char,      -- the character before the input

        alex_scd :: !Int        -- the current startcode

      , alex_ust :: AlexUserState -- AlexUserState will be defined in the user program

    }

-- Compile with -funbox-strict-fields for best results!






runAlex :: ByteString.ByteString -> Alex a -> Either String a
runAlex input__ (Alex f)
   = case f (AlexState {alex_bpos = 0,

                        alex_pos = alexStartPos,
                        alex_inp = input__,
                        alex_chr = '\n',

                        alex_ust = alexInitUserState,

                        alex_scd = 0}) of Left msg -> Left msg
                                          Right ( _, a ) -> Right a

newtype Alex a = Alex { unAlex :: AlexState -> Either String (AlexState, a) }

instance Functor Alex where
  fmap f a = Alex $ \s -> case unAlex a s of
                            Left msg -> Left msg
                            Right (s', a') -> Right (s', f a')

instance Applicative Alex where
  pure a   = Alex $ \s -> Right (s, a)
  fa <*> a = Alex $ \s -> case unAlex fa s of
                            Left msg -> Left msg
                            Right (s', f) -> case unAlex a s' of
                                               Left msg -> Left msg
                                               Right (s'', b) -> Right (s'', f b)

instance Monad Alex where
  m >>= k  = Alex $ \s -> case unAlex m s of
                                Left msg -> Left msg
                                Right (s',a) -> unAlex (k a) s'
  return = App.pure

alexGetInput :: Alex AlexInput
alexGetInput




 = Alex $ \s@AlexState{alex_pos=pos,alex_bpos=bpos,alex_chr=c,alex_inp=inp__} ->
        Right (s, (pos,c,inp__,bpos))


alexSetInput :: AlexInput -> Alex ()




alexSetInput (pos,c,inp__,bpos)
 = Alex $ \s -> case s{alex_pos=pos,
                       alex_bpos=bpos,
                       alex_chr=c,
                       alex_inp=inp__} of

                  state__@(AlexState{}) -> Right (state__, ())

alexError :: String -> Alex a
alexError message = Alex $ const $ Left message

alexGetStartCode :: Alex Int
alexGetStartCode = Alex $ \s@AlexState{alex_scd=sc} -> Right (s, sc)

alexSetStartCode :: Int -> Alex ()
alexSetStartCode sc = Alex $ \s -> Right (s{alex_scd=sc}, ())









alexMonadScan = do



  inp__@(_,_,_,n) <- alexGetInput

  sc <- alexGetStartCode
  case alexScan inp__ sc of
    AlexEOF -> alexEOF
    AlexError ((AlexPn _ line column),_,_,_) -> alexError $ "lexical error at line " ++ (show line) ++ ", column " ++ (show column)
    AlexSkip  inp__' _len -> do
        alexSetInput inp__'
        alexMonadScan



    AlexToken inp__'@(_,_,_,n') _ action -> let len = n'-n in do

        alexSetInput inp__'
        action (ignorePendingBytes inp__) len

-- -----------------------------------------------------------------------------
-- Useful token actions




type AlexAction result = AlexInput -> Int64 -> Alex result


-- just ignore this token and scan another one
-- skip :: AlexAction result
skip _input _len = alexMonadScan

-- ignore this token, but set the start code to a new value
-- begin :: Int -> AlexAction result
begin code _input _len = do alexSetStartCode code; alexMonadScan

-- perform an action for this token, and set the start code to a new value
andBegin :: AlexAction result -> Int -> AlexAction result
(action `andBegin` code) input__ len = do
  alexSetStartCode code
  action input__ len




token :: (AlexInput -> Int64 -> token) -> AlexAction token

token t input__ len = return (t input__ len)



-- -----------------------------------------------------------------------------
-- Basic wrapper
























-- -----------------------------------------------------------------------------
-- Basic wrapper, ByteString version
































-- -----------------------------------------------------------------------------
-- Posn wrapper

-- Adds text positions to the basic model.













-- -----------------------------------------------------------------------------
-- Posn wrapper, ByteString version














-- -----------------------------------------------------------------------------
-- GScan wrapper

-- For compatibility with previous versions of Alex, and because we can.














alex_tab_size :: Int
alex_tab_size = 8
alex_base :: Array Int Int
alex_base = listArray (0 :: Int, 92)
  [ -8
  , 13
  , 141
  , 269
  , 397
  , 525
  , 0
  , 638
  , 0
  , 751
  , 0
  , 816
  , 0
  , 881
  , -118
  , -31
  , 1137
  , 1073
  , 0
  , 1329
  , 1265
  , 0
  , 0
  , 1511
  , -39
  , 0
  , 0
  , 1513
  , 1757
  , 1507
  , 1729
  , 1974
  , 2058
  , 2142
  , 2226
  , 2310
  , 2394
  , 2478
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , -36
  , 0
  , -20
  , 0
  , -52
  , 0
  , -51
  , -50
  , 0
  , 0
  , 0
  , 0
  , 0
  , -30
  , -5
  , 70
  , 2562
  , 2646
  , 2730
  , 2814
  , 2898
  , 2982
  , 3066
  , 3150
  , 3234
  , 3318
  , 3402
  , 3486
  , 3570
  , 3654
  , 3738
  , 3822
  , 3906
  , 3990
  , 4074
  , 4158
  , 4242
  , 4326
  , 4410
  , 4494
  , 4578
  , 4662
  , 4746
  ]

alex_table :: Array Int Int
alex_table = listArray (0 :: Int, 5001)
  [ 0
  , 27
  , 27
  , 27
  , 27
  , 27
  , 62
  , 61
  , 22
  , 55
  , 58
  , 59
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 26
  , 25
  , 27
  , 64
  , 42
  , 28
  , 43
  , 53
  , 15
  , 0
  , 40
  , 41
  , 51
  , 49
  , 44
  , 50
  , 45
  , 52
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 63
  , 46
  , 56
  , 54
  , 57
  , 24
  , 60
  , 78
  , 76
  , 81
  , 78
  , 78
  , 78
  , 78
  , 78
  , 83
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 75
  , 78
  , 78
  , 78
  , 78
  , 38
  , 0
  , 39
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 82
  , 78
  , 78
  , 78
  , 91
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 77
  , 78
  , 78
  , 78
  , 68
  , 80
  , 78
  , 78
  , 78
  , 47
  , 14
  , 48
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 65
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 19
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 20
  , 2
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 13
  , 4
  , 8
  , 8
  , 8
  , 9
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 19
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 16
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 2
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 3
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 11
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 13
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 17
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 20
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 27
  , 27
  , 27
  , 27
  , 27
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 27
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , -1
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 19
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 21
  , 20
  , 2
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 12
  , 13
  , 4
  , 8
  , 8
  , 8
  , 9
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 16
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 18
  , 17
  , 3
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 10
  , 11
  , 5
  , 6
  , 6
  , 6
  , 7
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 31
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 32
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 92
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 66
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 89
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 88
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 87
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 85
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 84
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 70
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 72
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 79
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 74
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 73
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 71
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 69
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 86
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 90
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 67
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 37
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 36
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 35
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 34
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 33
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 30
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 78
  , 0
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 29
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 78
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  ]

alex_check :: Array Int Int
alex_check = listArray (0 :: Int, 5001)
  [ -1
  , 9
  , 10
  , 11
  , 12
  , 13
  , 124
  , 38
  , 47
  , 61
  , 61
  , 61
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 42
  , 10
  , 32
  , 33
  , 62
  , 47
  , 58
  , 37
  , 38
  , -1
  , 40
  , 41
  , 42
  , 43
  , 44
  , 45
  , 46
  , 47
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 58
  , 59
  , 60
  , 61
  , 62
  , 42
  , 61
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , 91
  , -1
  , 93
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 123
  , 124
  , 125
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 128
  , 129
  , 130
  , 131
  , 132
  , 133
  , 134
  , 135
  , 136
  , 137
  , 138
  , 139
  , 140
  , 141
  , 142
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 128
  , 129
  , 130
  , 131
  , 132
  , 133
  , 134
  , 135
  , 136
  , 137
  , 138
  , 139
  , 140
  , 141
  , 142
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 128
  , 129
  , 130
  , 131
  , 132
  , 133
  , 134
  , 135
  , 136
  , 137
  , 138
  , 139
  , 140
  , 141
  , 142
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 128
  , 129
  , 130
  , 131
  , 132
  , 133
  , 134
  , 135
  , 136
  , 137
  , 138
  , 139
  , 140
  , 141
  , 142
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 128
  , 129
  , 130
  , 131
  , 132
  , 133
  , 134
  , 135
  , 136
  , 137
  , 138
  , 139
  , 140
  , 141
  , 142
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 0
  , 1
  , 2
  , 3
  , 4
  , 5
  , 6
  , 7
  , 8
  , 9
  , 10
  , 11
  , 12
  , 13
  , 14
  , 15
  , 16
  , 17
  , 18
  , 19
  , 20
  , 21
  , 22
  , 23
  , 24
  , 25
  , 26
  , 27
  , 28
  , 29
  , 30
  , 31
  , 32
  , 33
  , 34
  , 35
  , 36
  , 37
  , 38
  , 39
  , 40
  , 41
  , 42
  , 43
  , 44
  , 45
  , 46
  , 47
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 58
  , 59
  , 60
  , 61
  , 62
  , 63
  , 64
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , 91
  , 92
  , 93
  , 94
  , 95
  , 96
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 123
  , 124
  , 125
  , 126
  , 127
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 0
  , 1
  , 2
  , 3
  , 4
  , 5
  , 6
  , 7
  , 8
  , 9
  , 10
  , 11
  , 12
  , 13
  , 14
  , 15
  , 16
  , 17
  , 18
  , 19
  , 20
  , 21
  , 22
  , 23
  , 24
  , 25
  , 26
  , 27
  , 28
  , 29
  , 30
  , 31
  , 32
  , 33
  , 34
  , 35
  , 36
  , 37
  , 38
  , 39
  , 40
  , 41
  , 42
  , 43
  , 44
  , 45
  , 46
  , 47
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 58
  , 59
  , 60
  , 61
  , 62
  , 63
  , 64
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , 91
  , 92
  , 93
  , 94
  , 95
  , 96
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 123
  , 124
  , 125
  , 126
  , 127
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 10
  , 9
  , 10
  , 11
  , 12
  , 13
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 32
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 42
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 128
  , 129
  , 130
  , 131
  , 132
  , 133
  , 134
  , 135
  , 136
  , 137
  , 138
  , 139
  , 140
  , 141
  , 142
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 10
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 128
  , 129
  , 130
  , 131
  , 132
  , 133
  , 134
  , 135
  , 136
  , 137
  , 138
  , 139
  , 140
  , 141
  , 142
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  ]

alex_deflt :: Array Int Int
alex_deflt = listArray (0 :: Int, 92)
  [ -1
  , 23
  , -1
  , -1
  , -1
  , -1
  , 10
  , 10
  , 12
  , 12
  , 18
  , 18
  , 21
  , 21
  , -1
  , -1
  , 28
  , 28
  , 28
  , 23
  , 23
  , 23
  , -1
  , 23
  , -1
  , -1
  , -1
  , -1
  , 28
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  ]

alex_accept = listArray (0 :: Int, 92)
  [ AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAcc 70
  , AlexAcc 69
  , AlexAcc 68
  , AlexAcc 67
  , AlexAcc 66
  , AlexAcc 65
  , AlexAcc 64
  , AlexAcc 63
  , AlexAcc 62
  , AlexAcc 61
  , AlexAcc 60
  , AlexAcc 59
  , AlexAcc 58
  , AlexAcc 57
  , AlexAcc 56
  , AlexAcc 55
  , AlexAcc 54
  , AlexAcc 53
  , AlexAcc 52
  , AlexAcc 51
  , AlexAcc 50
  , AlexAcc 49
  , AlexAcc 48
  , AlexAcc 47
  , AlexAcc 46
  , AlexAcc 45
  , AlexAcc 44
  , AlexAcc 43
  , AlexAcc 42
  , AlexAcc 41
  , AlexAcc 40
  , AlexAcc 39
  , AlexAcc 38
  , AlexAcc 37
  , AlexAcc 36
  , AlexAcc 35
  , AlexAcc 34
  , AlexAcc 33
  , AlexAcc 32
  , AlexAcc 31
  , AlexAcc 30
  , AlexAcc 29
  , AlexAcc 28
  , AlexAcc 27
  , AlexAcc 26
  , AlexAcc 25
  , AlexAcc 24
  , AlexAcc 23
  , AlexAcc 22
  , AlexAcc 21
  , AlexAcc 20
  , AlexAcc 19
  , AlexAcc 18
  , AlexAcc 17
  , AlexAcc 16
  , AlexAcc 15
  , AlexAcc 14
  , AlexAcc 13
  , AlexAcc 12
  , AlexAcc 11
  , AlexAcc 10
  , AlexAcc 9
  , AlexAcc 8
  , AlexAcc 7
  , AlexAcc 6
  , AlexAcc 5
  , AlexAcc 4
  , AlexAcc 3
  , AlexAcc 2
  , AlexAcc 1
  , AlexAcc 0
  ]

alex_actions = array (0 :: Int, 71)
  [ (70,alex_action_0)
  , (69,alex_action_1)
  , (68,alex_action_2)
  , (67,alex_action_3)
  , (66,alex_action_4)
  , (65,alex_action_5)
  , (64,alex_action_6)
  , (63,alex_action_7)
  , (62,alex_action_8)
  , (61,alex_action_9)
  , (60,alex_action_10)
  , (59,alex_action_11)
  , (58,alex_action_12)
  , (57,alex_action_13)
  , (56,alex_action_14)
  , (55,alex_action_15)
  , (54,alex_action_16)
  , (53,alex_action_17)
  , (52,alex_action_18)
  , (51,alex_action_19)
  , (50,alex_action_20)
  , (49,alex_action_21)
  , (48,alex_action_22)
  , (47,alex_action_23)
  , (46,alex_action_24)
  , (45,alex_action_25)
  , (44,alex_action_26)
  , (43,alex_action_27)
  , (42,alex_action_28)
  , (41,alex_action_29)
  , (40,alex_action_30)
  , (39,alex_action_31)
  , (38,alex_action_32)
  , (37,alex_action_33)
  , (36,alex_action_34)
  , (35,alex_action_35)
  , (34,alex_action_36)
  , (33,alex_action_37)
  , (32,alex_action_38)
  , (31,alex_action_39)
  , (30,alex_action_40)
  , (29,alex_action_41)
  , (28,alex_action_42)
  , (27,alex_action_43)
  , (26,alex_action_44)
  , (25,alex_action_44)
  , (24,alex_action_44)
  , (23,alex_action_44)
  , (22,alex_action_44)
  , (21,alex_action_44)
  , (20,alex_action_44)
  , (19,alex_action_44)
  , (18,alex_action_44)
  , (17,alex_action_44)
  , (16,alex_action_44)
  , (15,alex_action_44)
  , (14,alex_action_44)
  , (13,alex_action_44)
  , (12,alex_action_44)
  , (11,alex_action_44)
  , (10,alex_action_44)
  , (9,alex_action_44)
  , (8,alex_action_44)
  , (7,alex_action_44)
  , (6,alex_action_44)
  , (5,alex_action_44)
  , (4,alex_action_44)
  , (3,alex_action_44)
  , (2,alex_action_44)
  , (1,alex_action_44)
  , (0,alex_action_44)
  ]

{-# LINE 100 "AlexLexGen.x" #-}


data Token = 
      KeywordToken Keyword
    | TypeToken Type
    | SymbolToken Symbol
    | SeparatorToken Separator
    | OperatorToken Operator
    | IntToken Int
    | IdentifierToken T.Text
    | EOF
    deriving (Eq, Show)

data Keyword =
      Var
    | If
    | Else
    | While
    | Return
    deriving (Eq, Show)

data Type =
      IntType
    | BoolType
    | CharType
    | VoidType
    deriving (Eq, Show)

data Symbol = 
      SquareBracketOpen
    | SquareBracketClosed
    | BracketOpen
    | BracketClosed
    | RightArrow
    | DoubleColon
    | Comma
    | Dot
    deriving (Eq, Show)

-- ; { } 
data Separator =
      Semicolon
    | CurlyBraceOpen
    | CurlyBraceClosed
    deriving (Eq, Show)

data Operator =
      Plus
    | Minus
    | Star
    | Slash
    | Percent
    | Equal
    | DoubleEqual
    | Less
    | Greater
    | LessOrEqual
    | GreaterOrEqual
    | NotEqual
    | DoubleAnd
    | DoublePipe
    | SingleColon
    | ExclamationMark
    deriving (Eq, Show)


alexEOF = return EOF

-- Convert a Lazy Bytestring to Text
lazyBStoText :: B.ByteString -> T.Text
lazyBStoText = TE.decodeUtf8 . B.toStrict 

-- Get the current parsed token as T.Text
getCurrentToken :: AlexInput -> Int64 -> T.Text
getCurrentToken (_,_,s,_) l = T.take (fromIntegral l) $ lazyBStoText s

-- Retrieve all tokens.
-- Note that failures are automatically captured by the Alex monad instance.
-- i.e. we get (Left err) and thus the bind (>>=) operator short-circuits
getAllResults :: Alex [Token]
getAllResults = do
    x <- alexMonadScan'
    case x of
        EOF -> return [x]
        _ -> do
            xs <- getAllResults
            return $ x:xs

-- Pass in additional state to the Lexer.
-- The current filepath and the file contents
-- are used to give us nicer error messages
data AlexUserState = AlexUserState { 
    filePath :: FilePath, 
    contents :: B.ByteString 
}


-- Parse a single token.
-- Identical to generated alexMonadScan function
-- but with nicer error message (AlexError match)
alexMonadScan' = do
  inp__@(_,_,_,n) <- alexGetInput
  sc <- alexGetStartCode
  case alexScan inp__ sc of
    AlexEOF -> alexEOF
    AlexError context -> genError context
    AlexSkip  inp__' _len -> do
        alexSetInput inp__'
        alexMonadScan'
    AlexToken inp__'@(_,_,_,n') _ action -> let len = n'-n in do
        alexSetInput inp__'
        action (ignorePendingBytes inp__) len

    where
        genError ((AlexPn _ lineno column),c,s,_) = do
            fp <- T.pack <$> alexGetFilePath
            line <- ( (!! (lineno - 1)) . T.lines . lazyBStoText) <$> alexGetContent
            let token = T.take 50 . head . T.words . lazyBStoText $ s
                header = fp <> ":" <> T.pack (show lineno) <> ":" <> T.pack (show column) <> ": "
                gap = 1 + (length $ show lineno)
                bottomHighlight = T.replicate (column) " " <> T.replicate (T.length token) "^"
            alexError . T.unpack . T.unlines $ 
                [  
                header <> "error: lexical parse failure on input '" <> token <> "'", 
                T.replicate gap " " <> "|", 
                T.pack (show lineno) <> " | " <> line, 
                T.replicate gap " " <> "|" <> bottomHighlight
                ] 

-- Getter for the filepath from the user state 
alexGetFilePath :: Alex FilePath
alexGetFilePath = 
    Alex $ \s@(AlexState _ _ _ _ _ (AlexUserState fp _)) -> Right (s, fp)

--   Getter for the file content from the user state 
alexGetContent :: Alex B.ByteString
alexGetContent = 
    Alex $ \s@(AlexState _ _ _ _ _ (AlexUserState _ c)) -> Right (s, c)

-- Needed by the generated runAlex function.
-- Note that we don't use that function thus it can be left undefined
alexInitUserState = undefined

-- Runner of the lexer.
-- Takes the filepath and its contents
-- and returns a failure message or a list of tokens
tokenize :: FilePath -> B.ByteString -> Either T.Text [Token]
tokenize fp input = 
    case (unAlex getAllResults) state of
        Left msg -> Left . T.pack $ msg
        Right ( _, a ) -> Right a
    where
        state = AlexState { 
            alex_bpos = 0, 
            alex_pos  = alexStartPos, 
            alex_inp  = input, 
            alex_chr  = '\n', 
            alex_ust = AlexUserState fp input, 
            alex_scd = 0 
        } 

-- Parse the file given by the first cli argument 
main = do
    args <- getArgs
    let file = head args
    s <- B.readFile file
    case (tokenize file s) of
        Left err -> TIO.putStr err
        Right tokens -> print tokens


mlc :: Int
mlc = 1
alex_action_0 =  begin 0 
alex_action_1 =  skip 
alex_action_2 =  skip 
alex_action_3 =  skip 
alex_action_4 =  begin mlc 
alex_action_5 =  skip 
alex_action_6 =  skip 
alex_action_7 =  \_ _ -> return $ KeywordToken Var 
alex_action_8 =  \_ _ -> return $ KeywordToken If 
alex_action_9 =  \_ _ -> return $ KeywordToken Else 
alex_action_10 =  \_ _ -> return $ KeywordToken While 
alex_action_11 =  \_ _ -> return $ KeywordToken Return 
alex_action_12 =  \_ _ -> return $ TypeToken VoidType 
alex_action_13 =  \_ _ -> return $ TypeToken CharType 
alex_action_14 =  \_ _ -> return $ TypeToken BoolType 
alex_action_15 =  \_ _ -> return $ TypeToken IntType 
alex_action_16 =  \_ _ -> return $ SymbolToken SquareBracketOpen
alex_action_17 =  \_ _ -> return $ SymbolToken SquareBracketClosed
alex_action_18 =  \_ _ -> return $ SymbolToken BracketOpen
alex_action_19 =  \_ _ -> return $ SymbolToken BracketClosed
alex_action_20 =  \_ _ -> return $ SymbolToken RightArrow
alex_action_21 =  \_ _ -> return $ SymbolToken DoubleColon
alex_action_22 =  \_ _ -> return $ SymbolToken Comma
alex_action_23 =  \_ _ -> return $ SymbolToken Dot
alex_action_24 =  \_ _ -> return $ SeparatorToken Semicolon
alex_action_25 =  \_ _ -> return $ SeparatorToken CurlyBraceOpen
alex_action_26 =  \_ _ -> return $ SeparatorToken CurlyBraceClosed
alex_action_27 =  \_ _ -> return $ OperatorToken Plus
alex_action_28 =  \_ _ -> return $ OperatorToken Minus
alex_action_29 =  \_ _ -> return $ OperatorToken Star
alex_action_30 =  \_ _ -> return $ OperatorToken Slash
alex_action_31 =  \_ _ -> return $ OperatorToken Percent
alex_action_32 =  \_ _ -> return $ OperatorToken Equal
alex_action_33 =  \_ _ -> return $ OperatorToken DoubleEqual
alex_action_34 =  \_ _ -> return $ OperatorToken Less
alex_action_35 =  \_ _ -> return $ OperatorToken Greater
alex_action_36 =  \_ _ -> return $ OperatorToken LessOrEqual
alex_action_37 =  \_ _ -> return $ OperatorToken GreaterOrEqual
alex_action_38 =  \_ _ -> return $ OperatorToken NotEqual
alex_action_39 =  \_ _ -> return $ OperatorToken DoubleAnd
alex_action_40 =  \_ _ -> return $ OperatorToken DoublePipe
alex_action_41 =  \_ _ -> return $ OperatorToken SingleColon
alex_action_42 =  \_ _ -> return $ OperatorToken ExclamationMark
alex_action_43 =  token (\ai l -> IntToken . read . T.unpack $ getCurrentToken ai l) 
alex_action_44 =  token (\ai l -> IdentifierToken $ getCurrentToken ai l ) 
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- -----------------------------------------------------------------------------
-- ALEX TEMPLATE
--
-- This code is in the PUBLIC DOMAIN; you may copy it freely and use
-- it for any purpose whatsoever.

-- -----------------------------------------------------------------------------
-- INTERNALS and main scanner engine




































































alexIndexInt16OffAddr arr off = arr ! off
























alexIndexInt32OffAddr arr off = arr ! off











quickIndex arr i = arr ! i


-- -----------------------------------------------------------------------------
-- Main lexing routines

data AlexReturn a
  = AlexEOF
  | AlexError  !AlexInput
  | AlexSkip   !AlexInput !Int
  | AlexToken  !AlexInput !Int a

-- alexScan :: AlexInput -> StartCode -> AlexReturn a
alexScan input__ (sc)
  = alexScanUser undefined input__ (sc)

alexScanUser user__ input__ (sc)
  = case alex_scan_tkn user__ input__ (0) input__ sc AlexNone of
  (AlexNone, input__') ->
    case alexGetByte input__ of
      Nothing ->



                                   AlexEOF
      Just _ ->



                                   AlexError input__'

  (AlexLastSkip input__'' len, _) ->



    AlexSkip input__'' len

  (AlexLastAcc k input__''' len, _) ->



    AlexToken input__''' len (alex_actions ! k)


-- Push the input through the DFA, remembering the most recent accepting
-- state it encountered.

alex_scan_tkn user__ orig_input len input__ s last_acc =
  input__ `seq` -- strict in the input
  let
  new_acc = (check_accs (alex_accept `quickIndex` (s)))
  in
  new_acc `seq`
  case alexGetByte input__ of
     Nothing -> (new_acc, input__)
     Just (c, new_input) ->



      case fromIntegral c of { (ord_c) ->
        let
                base   = alexIndexInt32OffAddr alex_base s
                offset = (base + ord_c)
                check  = alexIndexInt16OffAddr alex_check offset

                new_s = if (offset >= (0)) && (check == ord_c)
                          then alexIndexInt16OffAddr alex_table offset
                          else alexIndexInt16OffAddr alex_deflt s
        in
        case new_s of
            (-1) -> (new_acc, input__)
                -- on an error, we want to keep the input *before* the
                -- character that failed, not after.
            _ -> alex_scan_tkn user__ orig_input (if c < 0x80 || c >= 0xC0 then (len + (1)) else len)
                                                -- note that the length is increased ONLY if this is the 1st byte in a char encoding)
                        new_input new_s new_acc
      }
  where
        check_accs (AlexAccNone) = last_acc
        check_accs (AlexAcc a  ) = AlexLastAcc a input__ (len)
        check_accs (AlexAccSkip) = AlexLastSkip  input__ (len)

        check_accs (AlexAccPred a predx rest)
           | predx user__ orig_input (len) input__
           = AlexLastAcc a input__ (len)
           | otherwise
           = check_accs rest
        check_accs (AlexAccSkipPred predx rest)
           | predx user__ orig_input (len) input__
           = AlexLastSkip input__ (len)
           | otherwise
           = check_accs rest


data AlexLastAcc
  = AlexNone
  | AlexLastAcc !Int !AlexInput !Int
  | AlexLastSkip     !AlexInput !Int

data AlexAcc user
  = AlexAccNone
  | AlexAcc Int
  | AlexAccSkip

  | AlexAccPred Int (AlexAccPred user) (AlexAcc user)
  | AlexAccSkipPred (AlexAccPred user) (AlexAcc user)

type AlexAccPred user = user -> AlexInput -> Int -> AlexInput -> Bool

-- -----------------------------------------------------------------------------
-- Predicates on a rule

alexAndPred p1 p2 user__ in1 len in2
  = p1 user__ in1 len in2 && p2 user__ in1 len in2

--alexPrevCharIsPred :: Char -> AlexAccPred _
alexPrevCharIs c _ input__ _ _ = c == alexInputPrevChar input__

alexPrevCharMatches f _ input__ _ _ = f (alexInputPrevChar input__)

--alexPrevCharIsOneOfPred :: Array Char Bool -> AlexAccPred _
alexPrevCharIsOneOf arr _ input__ _ _ = arr ! alexInputPrevChar input__

--alexRightContext :: Int -> AlexAccPred _
alexRightContext (sc) user__ _ _ input__ =
     case alex_scan_tkn user__ input__ (0) input__ sc AlexNone of
          (AlexNone, _) -> False
          _ -> True
        -- TODO: there's no need to find the longest
        -- match when checking the right context, just
        -- the first match will do.

